import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
// import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;

import javax.crypto.interfaces.PBEKey;
import javax.naming.ldap.SortKey;

/**
 * A server for a multi-player tic tac toe game. Loosely based on an example in
 * Deitel and Deitel"Java How to Program" application-le proto call TT (f T T
 * Protocol) whic i entirely plain text. The messages of TTTP are:
 *
 * Client -> Server MOVE <n> QUIT
 *
 * Server -> Client WELCOME <char> VALID_MOVE OTHER_PLAYER_MOVED <n>
 * OTHER_PLAYER_LEFT VICTORY DEFEAT TIE MESSAGE <text>
 */
public class TicTacToeServer {
    private final static Semaphore waitSetGameMode = new Semaphore(0);
    private static int gameDifficulty;

    public static int distriSocket(Socket socket) throws IOException {
        Scanner input;
        String command;
        input = new Scanner(socket.getInputStream());
        while (input.hasNextLine()) {
            command = input.nextLine();
            if (command.startsWith("GAMEMODE")) {
                Boolean isInPVC = command.substring(9, 12).equals("PVC");
                if (isInPVC) {
                    // input.close();
                    gameDifficulty = Integer.parseInt(command.substring(12));
                    System.out.println(gameDifficulty);
                    System.out.println("socket distribute: PVC Mode");
                    return 2;
                } else {
                    // input.close();
                    System.out.println("socket distribute: PVP Mode");
                    return 1;
                }
            }
        }

        return 0;
    }

    public static void main(String[] args) throws Exception {
        final Semaphore semp = new Semaphore(1);
        final Semaphore pvpSemp = new Semaphore(0);
        final Semaphore pvcSemp = new Semaphore(0);

        int disResult;
        try (ServerSocket listener = new ServerSocket(58901)) {
            System.out.println("Tic Tac Toe Server is Running...");
            PVPGame pvpgame = new PVPGame(pvpSemp);
            PVCGame pvcgame = new PVCGame(pvcSemp);
            pvpgame.start();
            pvcgame.start();

            while (true) {
                Socket receiveSocket;
                receiveSocket = listener.accept();
                disResult = distriSocket(receiveSocket);

                switch (disResult) {
                    case 1:// 人人对战
                        pvpgame.newInSocket = receiveSocket;
                        pvpSemp.release(1);
                        break;
                    case 2:// 人机对战
                        pvcgame.newInSocket = receiveSocket;
                        pvcSemp.release(1);
                        break;
                }

                // Game game = new Game();
                // // 创建一个信号量保证人机对战的初始化
                // semp.acquire(1);
                // Game.Player p1 = game.new Player(listener.accept(), 'X');
                // pool.execute(p1);
                // // 简陋的等待玩家选择模式后设置游戏的方式,逻辑上和性能上应该不合规范
                // // 因为要判断玩家的游戏模式需要一段时间,所以要等待
                // while (game.getGameMode() == 0) {
                // }
                // if (game.getGameMode() == 2) {
                // p1.opponent = game.new Computer(p1.socket, 'O', p1, p1.gameDifficulty,
                // p1.gameMode);
                // semp.release(1);
                // continue;
                // } else if (game.getGameMode() == 1) {
                // Game.Player p2 = game.new Player(listener.accept(), 'O');
                // pool.execute(p2);
                // semp.release(1);
                // }
            }
        }
    }
}

class PVPGame extends Thread {
    ExecutorService pool = Executors.newFixedThreadPool(200);
    Socket newInSocket;
    Semaphore PVP_WaitPlayer;

    public PVPGame(Semaphore waitPlayer) {
        this.PVP_WaitPlayer = waitPlayer;
    }

    public void run() {
        while (true) {
            Game game = new Game();
            try {
                PVP_WaitPlayer.acquire(1);
                Game.Player p1 = game.new Player(newInSocket, 'X');
                pool.execute(p1);

                PVP_WaitPlayer.acquire(1);
                Game.Player p2 = game.new Player(newInSocket, 'O');
                pool.execute(p2);

            } catch (InterruptedException e) {
                e.printStackTrace();
            }

        }
    }
}

class PVCGame extends Thread {
    ExecutorService pool = Executors.newFixedThreadPool(200);
    Socket newInSocket;
    Semaphore PVC_WaitPlayer;

    public PVCGame(Semaphore PVC_WaitPlayer) {
        this.PVC_WaitPlayer = PVC_WaitPlayer;
    }

    public void run() {
        while (true) {
            Game game = new Game();
            try {
                PVC_WaitPlayer.acquire(1);
                Game.Player p1 = game.new Player(newInSocket, 'X');
                
                game.aipc()

            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

        }
    }
}

class Game {

    // Board cells numbered 0-8, top to bottom, left to right; null if empty
    private Player[] board = new Player[9];
    private int gameDifficulty = -1;// 游戏难度 简单1 中等2 困难3
    private int gameMode = 0;// 游戏模式 1:PVP 2:PVC

    Player currentPlayer;
    Computer aipc;
    Semaphore pvcWait = new Semaphore(0);
    Semaphore pvcWaitComSetup = new Semaphore(0);

    public int getGameDifficulty() {
        return gameDifficulty;
    }

    public int getGameMode() {
        return gameMode;
    }

    public void setGameMode(int gameMode) {
        this.gameMode = gameMode;
    }

    public void setGameDifficulty(int difficulty) {
        this.gameDifficulty = difficulty;
    }

    public boolean hasWinner() {
        return (board[0] != null && board[0] == board[1] && board[0] == board[2])
                || (board[3] != null && board[3] == board[4] && board[3] == board[5])
                || (board[6] != null && board[6] == board[7] && board[6] == board[8])
                || (board[0] != null && board[0] == board[3] && board[0] == board[6])
                || (board[1] != null && board[1] == board[4] && board[1] == board[7])
                || (board[2] != null && board[2] == board[5] && board[2] == board[8])
                || (board[0] != null && board[0] == board[4] && board[0] == board[8])
                || (board[2] != null && board[2] == board[4] && board[2] == board[6]);
    }

    public boolean boardFilledUp() {
        for (int i = 0; i < 9; i++) {
            if (board[i] == null)
                return false;
        }
        return true;
    }

    public synchronized void move(int location, Player player) {
        if (player != currentPlayer) {
            throw new IllegalStateException("Not your turn");
        } else if (this.gameMode == 1 && player.opponent == null) {
            throw new IllegalStateException("You don't have an opponent yet");
        } else if (board[location] != null) {
            throw new IllegalStateException("Cell already occupied");
        }
        board[location] = currentPlayer;
        // move后输出棋盘
        printBoard();
        currentPlayer = currentPlayer.opponent;
    }

    public void printBoard() {
        for (int i = 0; i < 9; i++) {
            System.out.print(board[i] == null ? '_' : board[i].mark);
            System.out.print(' ');
            if ((i + 1) % 3 == 0) {
                System.out.print('\n');
            }
        }
    }

    class Computer implements Runnable {
        char mark;
        Player opponent;
        int gameDifficulty;

        public Computer(char mark, Player opponent) {
            this.mark = mark;
            this.opponent = opponent;
            this.gameDifficulty = opponent.gameDifficulty;
        }

        public void run() {
            try {
                computer_setup();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void computer_setup() throws IOException {

        }
    }

    /**
     * A Player is identified by a character mark which is either 'X' or 'O'. For
     * communication with the client the player has a socket and associated Scanner
     * and PrintWriter.
     */
    class Player implements Runnable {
        char mark;
        int gameDifficulty = -1;// 游戏难度 简单1 中等2 困难3
        int gameMode = 0;// 游戏模式 1:PVP 2:PVC

        Player opponent;
        Socket socket;

        Scanner input;
        PrintWriter output;

        public Player(Socket socket, char mark) {
            this.socket = socket;
            this.mark = mark;
        }

        public void run() {
            try {
                setup();
                processCommands();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (opponent != null && opponent.output != null) {
                    opponent.output.println("OTHER_PLAYER_LEFT");
                }
                try {
                    socket.close();
                } catch (IOException e) {
                }
            }
        }

        private void setup() throws IOException {
            input = new Scanner(socket.getInputStream());
            output = new PrintWriter(socket.getOutputStream(), true);
            output.println("WELCOME " + mark);// char mark = response.charAt(8);客户端代码
            if (mark == 'X') {
                System.out.println("Mark is X");
                currentPlayer = this;
                output.println("MESSAGE Waiting for opponent to connect");
            } else {
                System.out.println("Mark is O");

                opponent = currentPlayer;
                opponent.opponent = this;
                opponent.output.println("MESSAGE Your move");
            }
        }

        private void processCommands() {
            String command = "";
            while (input.hasNextLine()) {
                command = input.nextLine();
                if (command.startsWith("QUIT")) {
                    return;
                } else if (command.startsWith("GAMEMODE")) {
                    Boolean isInPVC = command.substring(9, 12).equals("PVC");
                    if (isInPVC) {
                        gameMode = 2;
                        setGameMode(2);
                        System.out.println("PVC Mode");
                    } else {
                        gameMode = 1;
                        setGameMode(1);
                    }
                } else if (command.startsWith("GAMEDIFFICULTY")) {
                    gameDifficulty = Integer.parseInt(command.substring(15));
                    setGameDifficulty(gameDifficulty);
                    System.out.println("Game Difficulty: " + gameDifficulty);
                } else if (command.startsWith("MOVE")) {// out.println("MOVE " + j);客户端代码
                    processMoveCommand(Integer.parseInt(command.substring(5)));
                }
            }
        }

        // private void computerMoveCommand(int location) {
        // try {
        // move(location, this);
        // output.println("VALID_MOVE");

        // if (hasWinner()) {
        // output.println("VICTORY");
        // opponent.output.println("DEFEAT");
        // } else if (boardFilledUp()) {
        // output.println("TIE");
        // opponent.output.println("TIE");
        // }

        // } catch (IllegalStateException e) {
        // output.println("MESSAGE " + e.getMessage());
        // }
        // }

        private void processMoveCommand(int location) {
            try {
                move(location, this);
                output.println("VALID_MOVE");
                opponent.output.println("OPPONENT_MOVED " + location);
                if (hasWinner()) {
                    output.println("VICTORY");
                    opponent.output.println("DEFEAT");
                } else if (boardFilledUp()) {
                    output.println("TIE");
                    opponent.output.println("TIE");
                }
            } catch (IllegalStateException e) {
                output.println("MESSAGE " + e.getMessage());
            }
        }
    }
}